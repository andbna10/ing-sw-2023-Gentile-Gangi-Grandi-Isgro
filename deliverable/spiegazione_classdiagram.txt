Model
------------

ItemTile /

GoalCard-CommonGoalCard:
 ATTRIBUTI -
 stack è semplicemente una lista di token punteggi a cui deve essere associato una carta obiettivo comune se selezionata per la partita.
 METODI - get e set dello stack, il set riceve in input una lista di token punteggio.

ScoringToken /

BoardGame:
 ATTRIBUTI -
 board è una matrice 9x9 che può contenere gli oggetti ItemTile(da implementare nella logica - solo alcune celle possono essere occupate);
 empty_cells tiene il conteggio delle caselle della plancia di gioco, che potrebbero essere riempite, che sono vuote.
 METODI -
 get_board ritorna la plancia di gioco;
 set_tiles riceve in input una lista di oggeti tiles e si occupa di posizionarli all'interno della plancia di gioco board;
 get_tile riceve in input la posizione della tile che deve essere presa e ritorna appunto un oggetto ItemTile.

Game:
 ATTRIBUTI -
 players è la lista dei giocatori che partecipano alla partita;
 board è il riferimento alla plancia di gioco;
 common_goals è una lista di due carte obiettivo comune;
 order è un vettore contenente gli indici dei giocatori (in players) in ordine di turno di gioco;
 current_turn_player indica l'lindice del giocatore che è impegnato nel turno di gioco;
 last_turn indica se è iniziato o meno l'ultimo turno di gioco.
 METODI -
 get e set delle carte obiettivo comune, il set riceve in input una lista di carte obiettivo comune e le setta nel suo attributo common_goals.

Player:
 ATTRIBUTI -
 nome;
 punteggio;
 goal è il riferimento alla carta obiettivo comune associata al giocatore;
 bookshelf è il riferimento alla libreria del giocatore;
 first_to_finish, winner, commonOne, commonTwo sono dei booleani che servono per comprendere lo stato del giocatore. In particolare commnoOne e commonTwo indicano se il giocatore        ha o meno raggiunto gli obiettivi comuni.
 METODI -
 get e setter vari

Bookshelf:
 ATTRIBUTI -
 game_tiles è una matrice 6x5 che contiene le tiles che il giocatore ha inserito gia nella proopria libreria;
 isFull è un booleano che mi serve a indicare che la libreria è stata completamente riempita o no dal giocatore.
 METODI -
 get_bookshelf ritorna la matrice che rappresenta la libreria del giocatore;
 column_isFull riceve in input un intero che indica l'indice di una colonna, e ritorna True se la colonna è stata riempita completamente, False altrimenti;
 set_tiles riceve in input l'indice della colonna per inserire le tessere nella libreria e ovviamente la lista delle tessere.


-------------------------------------------------------------------------------------------------------

Controller
--------------

MyShelfie:
 ATTRIBUTI -
 tiles è la lista di tutte le 132 tiles del gioco;
 personal_goal_card è la lista di tutte le carte obiettivo personale;
 common_goal_card è la lista di tutte le carte obiettivo comune;
 scoring_Tokens è la lista di tutte i token punteggio (per gli obiettivi comuni).
 METODI -
 select_personal_goals riceve in input il numero di giocare che partecipano alla partita e resituisce una lista di obiettivi personali con size uguale all'input;
 select_common_goals estrae e ritorna due carte obiettivo comune dalla lista;
 select_scoring_tokens riceve in input il numero di giocatori che partecipano alla partita e restituisce una lista di token punteggio con size dipendente dall'input fornito;   select_tiles riceve in input il numero di tiles necessarie a rifornire la plancia di gioco e restituisce appunto una lista di Tiles.

PlayerController: 
ATTRIBUTI -
 model è il riferimento al Player;
 game è il riferimento al GameController.
 METODI -
 set_goal prende in input il riferimento al Player e una carta obiettivo personale, quello che fa è chiamare il metodo di Player set_goal (fa parte dei setter non indicati in Player) per settare appunto in goal (attributo di player) la carta obiettivo personale in input;
 get_tile riceve in input il riferimento al GameController e delle coordinate, quello succede è che viene chiamato il metodo game.board.get_tile del BoardGame;
 feed_column riceve in input il riferimento al Player, una lista di tiles e l'indice di una colonna, quello che fa è accedere al bookshelf del player e modificarne lo stato (tramite il metodo set_tile del bookshelf);
 check_goal riceve in input il riferimento al Player e una carta obiettivo, quello che fa è ancora una volta accedere al bookshelf del Player e vedere se l'obiettivo è stato raggiunto o meno.

GameController:
 ATTRIBUTI -
 model è il riferimento al Game;
 name_game è il riferimento a MyShelfie;
 players è la lista dei riferimenti ai controller dei giocatori;
 board è il riferimento alla plancia di gioco.
 METODI -
 select_first_to_play riceve in input il riferimento al game, quello che fa è generare un numero randomico tra 1 e players.size e poi accedendo al game ne modifica lo stato(order e current player);
 set_common_goal_cards riceve in input il riferimento al Game e il riferimento a MyShelfie, quello che fa è accedere al metodo select_common_goals di MyShelfie che appunto restituisce una lista di 2 carte obiettivo comune e poi accedere al metodo set_common_goals di Game (dando in input l'output di prima) e così viene modificato la stato del Game con le due carte obiettivo in common_goals (attributo di Game);
 associate_scoring_tokens prende in input il riferimento a MyShelfie, il riferimento al Game e un intero che indica il numero di giocatori, quello che fa è accedere al metodo di MyShelfie select_scoring_tokens per ottenere in output una lista di tokens, poi si accede ai common_goals del Game e da lì al metodo set_stack dei singoli commonGoalCard per settare lo stack (passandogli in input la lista ottenuta prima);
 set_personal_goal riceve in input il riferimento al PlayerController e a MyShelfie e quello che fa è accedere al metodo select_personal_goal di MyShelfie che ritona un carta obiettivo personale e successivamente al metodo set_goal di PlayerController passandogli in input la carta obiettivo personale ottenuta prima;
 restore_board prende in input il riferimento alla plancia di gioco e a MyShelfie, quello che fa è lanciare il metodo di MyShelfie select_tiles passandogli in input l'intero board.empty_cells, quello che si ottiene in output è appunto una lista di oggetti ItemTile, dopo si chiama il metodo di BoardGame set_tiles passandogli in input quella lista di tiles ottenuta prima volta a modificare lo stato dell'attributo board della classe;
play_turn prende in input il riferimento a un PlayerController e permette al giocatore di giocare il turno;
start_game serve per dare inizio al giro dei turni e iniziare la partita
end_game restituisce il giocatore che ha totalizzato più punti alla fine dell'ultimo turno di gioco
